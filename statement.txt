Statement of Code Inspiration and Attribution - David Araba, s4809314

In the development of the DynamicArray class for my project, I referenced and was inspired by a publicly available tutorial on YouTube titled "Learn Merge Sort in 13 minutes" by "BroCode" (URL: https://www.youtube.com/watch?v=3j0SWDX4AtU&t=522s). While the code I implemented was written independently, the underlying concepts, particularly the approach to merging, were influenced by the explanation provided in the video. I have adapted these ideas to suit the specific requirements of my assignment, ensuring that the implementation aligns with the constraints and goals of the project.

In the implementation of the k_cool function within my warmup.py file, I included a modular_exponentiation function to efficiently compute large exponentiations under a modulus. The design of this function was inspired by an algorithm discussed on the Crypto Stack Exchange (URL: https://crypto.stackexchange.com/questions/75408/efficient-function-algorithm-method-to-do-modular-exponentiation).

In the development of the quicksort function within my warmup.py file, I adapted the implementation from a discussion on Stack Overflow (URL: https://stackoverflow.com/questions/18262306/quicksort-with-python). The original code provided a clear and concise approach to implementing the quicksort algorithm in Python. I modified and adapted this code to fit the specific needs and constraints of my assignment while maintaining the core logic of the quicksort algorithm as presented.

In the process of implementing the __left_shift and __right_shift methods in my BitVector class, I sought clarification on certain aspects of bit manipulation, particularly handling carry bits during shifts. I used ChatGPT, an AI language model, to help explain the logic and ensure the correct handling of carry bits when shifting bits left or right across different blocks of the BitVector.

**David:** ChatGPT, can you briefly explain the logic behind bit rotation?

**ChatGPT:** Absolutely, David! Bit rotation involves moving the bits of a binary number to the left or right, but instead of discarding the bits that move past the edge, you wrap them around to the opposite side. So, if you rotate a bit pattern to the left, the leftmost bit moves to the rightmost position, and vice versa for a right rotation. This operation is particularly useful when you need to manipulate bits in a cyclical manner, such as in cryptographic algorithms or data compression, where maintaining the integrity of all bits while shifting their positions is crucial.

**David:** Can you briefly explain the concept of carry-over?

**ChatGPT:** Sure, David! In binary arithmetic, a carry-over happens when the sum of two bits exceeds the value that a single bit can hold (which is 1). For example, when adding 1 and 1 in binary, the result is 10. The '0' stays in the current bit position, and the '1' is carried over to the next higher bit position. This carry-over is crucial in operations like addition, where it affects the final result across multiple bit positions, ensuring accurate computation.

**David:** Can you briefly explain how to handle carry-over across multiple elements in an array?

**ChatGPT:** Certainly, David! When dealing with carry-over across multiple elements in an array, especially during addition, you start by adding corresponding elements from the end of the array (like in regular addition). If the sum exceeds the maximum value for a single element (like 9 in decimal or 1 in binary), you retain the unit part in the current position and carry the excess to the next element on the left. This process continues until all elements are processed, and any remaining carry is added as a new element at the beginning if needed. This ensures the correct handling of overflow across the entire array.

